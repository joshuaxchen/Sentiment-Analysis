# -*- coding: utf-8 -*-
"""Sentiment Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yqOqUxs9ggzF47EIG7qYeYtPt5zuzj75
"""

from alpha_vantage.timeseries import TimeSeries
import matplotlib.pyplot as plt
from textblob import TextBlob
import math
from urllib.request import urlopen, Request
from bs4 import BeautifulSoup
import pandas as pd
import tweepy
#twitter api access
consumerKey = ""
consumerSecret = ""
accessToken = ""
accessTokenSecret = ""
auth = tweepy.OAuthHandler(consumerKey, consumerSecret)
auth.set_access_token(accessToken, accessTokenSecret)
api = tweepy.API(auth, wait_on_rate_limit=True)
alpha_key = "" #alphavantage api access

#webscraping finviz
finviz_url = 'https://finviz.com/quote.ashx?t='
ticker = str(input("Please enter a stock ticker symbol: "))
news_tables = {}
url = finviz_url + ticker
req = Request(url=url, headers={'user-agent': 'my-app'})
response = urlopen(req)
html = BeautifulSoup(response, features='html.parser')
news_table = html.find(id='news-table')
news_tables[ticker] = news_table

#adding news titles
parsed_data = []
for ticker, news_table in news_tables.items():
    for row in news_table.findAll('tr'):
        title = row.a.text
        parsed_data.append([title])

#write csv
df = pd.DataFrame(parsed_data, columns=['title'])
df.to_csv(r'stock.csv', index = False) 
f = open('stock.csv', 'r')
lines = f.readlines()

#using textblob for sentiment analysis
stockdata = []
for element in lines:
    stockdata.append(element.replace("\n","").strip("title").strip(" ").strip(""))
sentilist = []
for element in stockdata:
    sentiScore = TextBlob(element)
    sentiment = sentiScore.sentiment.polarity
    if sentiScore.sentiment.polarity != 0:
        sentilist.append(sentiment)
sentilistTotal = sum(sentilist)/len(sentilist)
confidence = round(abs(sentilistTotal*100),2)
print("Based on news headlines: ")
if sentilistTotal >= 0.7:
      print("Strong buy with",confidence,"% confidence")
elif sentilistTotal >= 0.2:
      print("Buy with",confidence,"% confidence")
elif sentilistTotal <= -0.7:
      print("Strong sell with",confidence,"% confidence")
elif sentilistTotal <= -0.2:
      print("Sell with",confidence,"% confidence")
else:
      print("Neutral with",confidence,"% confidence")

#twitter sentiment analysis
tweetlist = []
sentilist = []
keyword = "$"+ ticker
noOfTweet = int(input ("Enter number of tweets to analyze: "))
tweets = tweepy.Cursor(api.search, q=keyword).items(noOfTweet)
for tweet in tweets:
  tweetlist.append(tweet.text)
for tweet in tweetlist:
  sentiScore = TextBlob(tweet)
  sentiment = sentiScore.sentiment.polarity
  if sentiScore.sentiment.polarity != 0:
    sentilist.append(sentiment)
sentilistTotal = 0.2+ sum(sentilist)/len(sentilist)
confidence = round(abs(sentilistTotal*100),2)
print("Based on Twitter: ")
if sentilistTotal >= 0.7:
  print("Strong buy with",confidence,"% confidence")
elif sentilistTotal >= 0.2:
  print("Buy with",confidence,"% confidence")
elif sentilistTotal <= -0.7:
  print("Strong sell with",confidence,"% confidence")
elif sentilistTotal <= -0.2:
  print("Sell with",confidence,"% confidence")
else:
  print("Neutral with",confidence,"% confidence")

#Alpha Vantage Historical Price Plot
ts = TimeSeries(key= alpha_key, output_format='pandas')
data, meta_data = ts.get_intraday(symbol= ticker,interval='1min', outputsize='full')
data['4. close'].plot()
plt.show()

